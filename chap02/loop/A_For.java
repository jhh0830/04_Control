package com.kh.chap02.loop;

import java.util.Iterator;
import java.util.Scanner;

// for문
public class A_For {

	/*
	 * * for문 "반복 횟수가 정해져 있을 때" 쓰는 반복문 문법 상으로 반복의 횟수를 지정하는 부분이 있다. 초기식, 조건식, 증감식 이
	 * 세개의 구문을 가지고 반복의 횟수를 직접 지정해야함 (각각 세미콜론으로 구분됨)
	 * 
	 * 
	 * [ 표현법 ] for(int i = 0; 조건식; 증감식) {
	 * 
	 * 
	 * 
	 * 반복적으로 실행시키고자 하는 코드;
	 * 
	 * 
	 * }
	 * 
	 * > 초기식 : 반복문이 시작될 때 "초기에 단 한번만 실행" 되는 구문 (반복문에서 사용할 변수를 선언 및 초기화 하는 부분) 예) int
	 * i =0; > 조건식 : "반복문이 수행될 조건" 을 작성하는 구문 조건식이 true 일 경우 반복 더 실행 조건식이 false 일 경우
	 * 반복을 멈춤 (반복을 멈춤 == 반복문을 빠져나가겠다) 주로 초기식에 제시된 변수를 가지고 조건식을 작성함!! 예) i < 10;
	 * 
	 * > 증감식 : 반복문을 제어하는 변수 값을 "증감" 시키는 구문 보통 초기식에 제시된 변수를 가지고 증감식을 작성함!! 예) i++
	 * 
	 * * for문의 수행 흐름 for문을 만나는 순간 초기식 --> 조건식 (조건검사) --> true 일 경우 실행하고자 하는 구문 실행
	 * -->증감식 --> 조건식 (조건검사) --> true 일경 우 실행하고자 하는 구문 실행 -->증감식 --> 조건식 (조건검사) -->
	 * true 일경 우 실행하고자 하는 구문 실행 -->증감식 ... --> 조건식 (조건검사) --> false 일 경우 구문 실행 x
	 * (빠져나감)
	 * 
	 * > 매번 조건식의 조건검사 결과를 통해 조건이 true 일 경우만 반복해서 실행하는 원리임
	 */

	public void method1() {// method1 영역 시작

		// "안녕하세요." 를 5번 반복해서 출력하고싶다.
		// 방법1. 출력문을 5번 다 쓰는 방법

		/*
		 * System.out.println("안녕하세요."); System.out.println("안녕하세요.");
		 * System.out.println("안녕하세요."); System.out.println("안녕하세요.");
		 * System.out.println("안녕하세요.");
		 */

		// > 적은 횟수일 경우 복퉅이 가능하지만
		// 100번, 500번, .. 반복하고 싶은 경우?
		// 일일이 복붙하기에는 시간도 아깝고 실수할 가능성도 있음!!

		// for문을 이용해서 반복 돌려보기 (5회)
		for (int i = 1; i <= 5; i++) {
			System.out.println("안녕하세요");
		}
	}// method1 영역 끝

	public void method2() {
		// "반갑습니다." 를 5번 출력

		// 반복 횟수 : 5회
		// i값이 1에서부터 6보다 작을 때 까지 1씩 증가할 동안 반복 수행
		// i = 1 2 3 4 5 (반복이 돔) / (빠져나옴)
		for (int i = 1; i < 6; i++) {
			// 시작수 : 1, 끝수 : 5

			System.out.println("반갑습니다.");
		}

		System.out.println("---------------");

		// "다시만나요." 를 5번 출력
		// 반복 횟수 : 5회
		// i값이 11에서부터 16보다 작을때까지 1씩 증가할 동안 반복 수행
		// i = 11 12 13 14 15 (반복이 돔) / 16(빠져나감)
		for (int i = 11; i < 16; i++) {
			System.out.println("다시만나요");

		}
	}
	// > 두번째 for문의 초기식 변수명이 i 임에도 불구하고
	// 오류가 나지 않는이유 : 초기식 변수는 for { 여기 }
	// 안에서만 유효한 변수이기 때문에

	/*
	 * * 초기식, 조건식, 증감식을 어떻게 지정하냐에 따라 반복 횟수가 같아질수도, 달라질수도 있음!!
	 * 
	 * * 제일 단순하게 반복되는 횟수를 지정하는 표현법(나름의 공식) [ 표현법 ] int i = 0; i < 반복횟수; i++ 0부터 시작이라
	 * 반복횟수 까지 반복되게 한다.
	 * 
	 */
	public void method3() { // method3 메소드 영역 시작
		// "하이" 를 5번 출력

		// 반복 횟수 : 5회
		// i값이 1에서부터 10까지 매번 2씩 증가할 동안 반복 수행
		// i = 1 3 5 7 9(반복이 돔) / 11 (빠져나감)
		for (int i = 1; i < 10; i += 2/* 같은뜻 i = i + 2 */) {
			System.out.println("하이");
		}
		// > 증감식이 무조껀 1씩 증가하라는 법은 없다.
	}// method3 메소드 영역 끝

	public void method4() {// method4 메소드 영역 시작
		// "헬로우"를 5번 출력

		// 반복 횟수 : 5회
		// i값이 10에서부터 6부터 크거나 같을때가지 매번 1씩 감소할동안 반복 수행
		// i = 10 9 8 7 6 5 >= 6 (빠져나감)
		//
		for (int i = 10; i >= 6; i--) {
			System.out.println("헬로우");
		}
	}// method4 메소드 영역 끝

	public void method5() {

		// "굿바이"를 5번 출력
		// 반복 횟수 : 5회
		// i값이 0에서부터 5보다 작을때 가지 1씩 증가할 동안 반복 수행
		// i = 0 1 2 3 4

		for (;;) {
			System.out.println("굿바이");
		}
		// > 항상 반복 횟수를 지정할 때 반복 횟수가 0회가 되거나
		// 잘못된 횟수 지정으로 무한반복이 돌아가는 상황을 지양해야함
		// > 단, 의도적으로 무한 복을 돌리고 싶다면
		// 조건식 부분에 대놓고 true 라고 적어 주면 된다.
		// for(; true;) 또는 for(;;) 로 표현 가능하다.

		// 참고) 어제 배운 조건문에서..
		// if(true) {
		// 이 중괄호 안의 코드는 어찌되었든 간에 무조건 실행됨
		//
		// }
	}// method 5 메소드 영역 끝

	public void method6() {

		// 고정적인 내용 말고 매번 달라지는 출력 결과를 보자
		// "i : 1"
		// "i : 2"
		// "i : 3"
		// ...
		// "i : 10"

		// 이런 경우에는 항상 "규칙"을 찾아봐야 한다!!
		// 앞쪽의 "i : " 까지는 공통 문자열
		// 뒷쪽의 숫자값들은 1 에서부터 11 보다 작을때까지 매번
		// 1씩 증가하면서 출력되고 있음

		/*
		 * for(int i = 1; i < 11; i++) { //System.out.printf("i : %d\n",i);
		 * 
		 * System.out.println("i : "+ i);
		 * 
		 * }
		 */

		// 퀴즈) 아래의 for문을 가지고 위와 같은 결과 출력해보기

		for (int i = 0; i < 10; i++) {
			System.out.println("i : " + (i + 1));
		}

	}// method6 영역 끝

	public void method7() {

		// "1 2 3 4 5 6 7 8 9 10" 출력
		// System.out.println("1 2 3 4 5 6 7 8 9 10");
		// 이왕이면 반복문을 이용해보고 싶다!
		// > 규칙 : 시작수가 1, 끝수가 10 포함, 1씩 매번 증가하는 규칙
		// 줄바꿈이 일어나지 않고있음

		for (int i = 1; i < 11; i++) {
			System.out.print(i + " ");

		}

	}// method7 메소드 영역 끝

	public void method8() {

		// 1부터 10까지의 정수들 중에 "홀수만을" 출력
		// "1 3 5 7 9"

		// 규칙 : 시작수 1, 끝수 9, 매번 2씩 증가
		// 줄바꿈 없이 공백으로 구분하여 출력
		// for(int i = 1; i <= 9; i += 2) {
		// 의도적으로 i에 1에서부터 9까지의 홀수만 담기게 유도

		// System.out.print(i + " ");

		// }
		// > 반복이 애초에 5번만 깔끔하게 일어남

		// 방법2)
		// 규칙 : 시작수 1, 끝수 9 포함, 매번 1씩 증가
		// i = 1 2 3 4 5 6 7 8 9(반복이 돔) / 10 (빠져나감)
		// > 반복이 총 9회 일어남
		for (int i = 1; i <= 9; i++) {

			// 내가 출력해야할 i 가 홀수일 경우에만
			// 출력문이 실행되게끔 선택적인 구문을
			// 활용해주면 됨 (조건문)
			if (i % 2 == 1) {
				System.out.print(i + " ");
			}

		}
		// > 반복은 9번 진행되지만 결국 출력은 5번만 일어남
	}// method8 메소드 영역 끝

	public void method9() {

		// 1에서부터 10까지의 숫자를 모두 더한 결과를 출력해보기

		// 방법1)
		// int sum = 1 + 2 + 3 + .. + 10;

		// 방법2)
		// 반복문을 이용한 방법 (규칙 먼저 찾기)
		/*
		 * int sum = 0; sum = sum + 1; // 1까지만 더한 결과 sum = sum + 2; // 2까지만 더한 결과 sum =
		 * sum + 3; sum = sum + 4; .... // 계속 이전 결과에 누적해서 숫자를 더해주고 있음 sum = sum + 10; //
		 * 10까지 누적해서 모두 더한 결과
		 * 
		 * 
		 */

		// 최종 덧셈 결과를 담을 변수 먼저 셋팅
		int sum = 0; // 누적합을 구할 변수값은 항상 0으로 초기화 해야함

		// 규칙 : 시작 1, 끝수는 10 포함, 매번 1씩 증가
		for (int i = 1; i <= 10; i++) {

			sum += i; // sum = sum + i;
			// > sum 에 현재 i 값을 누적해서 더해서 다시 대입

		}
		// 이 시점 기준으로 sum에는 총 덧셈 결과가 정확하게 담겨있다.
		System.out.println("sum : " + sum);
	}// method9 메소드 영역 끝

	public void method10() {
		// 1에서부터 사용자가 입력한 정수까지의 총 합을 구해보자
		Scanner sc = new Scanner(System.in);
		System.out.print("양수 입력 : ");
		int num = sc.nextInt();
		sc.nextLine();

		// 본격적인 덧셈 연산 전, 양수인지 먼저 판별
		if (num > 0) {// 양수일 경우

			// 이제서야 덧셈 연산이 가능함
			// 규칙 : 시작수 1, 끝수 num 포함, 1씩 증가
			int sum = 0;
			for (int i = 1; i <= num; i++) {

				sum = sum + i; // sum += i;

			}
			// 이 시점 기준으로 sum에는 제대로된 결과가 담겨 있음
			System.out.println("사용자가 입력한 정수까지의 총합 : " + sum);
		} else {// 양수가 아닐경우
			System.out.println("양수를 입력해야합니다.");
		}

	}// method 10 영역 끝

	public void method11() {
		// 1에서부터 매번 달리지는 랜덤값(1~10 사이의 랜덤한 정수)
		// 까지의 총 합계

		/*
		 * * 랜덤값(임의의 값) 구하기 자바에서 제공하는 math 클래스에 정의되어있는 random() 이라는 메소드를 호출하여 매번 다른 랜덤값을
		 * 얻어올수있다.
		 * 
		 * [ 표현법 ] Math.random(); > Math 클래스를 대변할 이름을 생성하지 않고 클래스명.메소드명(); 으로 바로 호출한다!!
		 * random 메소드는 static 이라는 키워드가 붙은 메소드이기 때문에 > Math.random()을 호출하는 순간 0.0 ~
		 * 0.99999999999... 사이의 랜덤값 하나가 발생이 됨 0.0 <= 랜덤값 <1.0
		 * 
		 * 
		 */

		// System.out.println(Math.random());
		// > 0.0~0.999999999... 사이의 값 아무거나 나옴

		/*
		 * 근데, 우리가 원하는 랜덤수의 범위는 1~10
		 * 
		 * 0.0~0.9999999999999..
		 * 
		 * 1) 10을 곱해보자 0.0 ~9.99999999999.. 2) 1을 더해보자 1~10.9999999999... 3)소숫점을 날려보자 1
		 * ~ 10
		 * 
		 * 
		 * * 내가 원하는 구간의 랜덤수를 뽑는 공식 [ 표현법 ] (int)(Math.random() * 몇개의 랜덤수 + 시작수)
		 * 
		 * 
		 * 예) 11 ~ 20 사이의 랜덤한 정수를 얻어내고 싶다 (int)(Math.random() * 10 + 11)
		 * 
		 * 
		 */

		// 1 ~ 10 까지의 랜덤수 발생시키기 (변수에 담기)
		int random = (int) (Math.random() * 10 + 1);
		System.out.println("현재 발생한 랜덤값 : " + random);

		// 총합을 담을 변수 먼저 셋팅 (0으로)
		int sum = 0;
		// 규칙 : 시작수 1, 끝수 random 포함, 1씩 증가
		for (int i = 1; i <= random; i++) {
			sum += i; // sum = sum + i;
		}
		System.out.println("1에서부터 랜덤값까지의 총합 : " + sum);
	}// method11 메소드 영역 끝

	public void method12() {

		// 사용자로부터 2 ~ 9 사이의 정수를 하나 입력받아
		// 해당 구구단을 출력해보기

		/*
		 * 규칙 찾기) 2단 2 X 1 = 2 2 X 2 = 4 2 X 3 = 6 2 X 4 = 8 2 X 5 = 10 2 X 6 = 12 ... 2
		 * X 9 = 18
		 * 
		 * 규칙: 시작수 1, 끝수 9 포함, 1씩 증가
		 */
		Scanner sc = new Scanner(System.in);

		System.out.print("2 ~ 9 사이의 정수 입력 : ");
		int num = sc.nextInt();
		sc.nextLine();

		// 알맞은 정수 범위를 입력했는지 먼저 검사
		if ((2 <= num) && (num <= 9)) {// 제대로된 범위임

			// System.out.println("---" + num + "단");
			System.out.printf("--- %d단 ---\n", num);
			for (int i = 1; i <= 9; i++) {
				System.out.printf("%d x %d = %d\n", num, i, (num * i));
			}
		} else {// 제대로된 범위가 아닐경우

			System.out.println("2 ~ 9 사이의 정수가 아닙니다.");
		}

	}// method12 메소드 영역 끝

	// 이 상황에서 2단에서 9단까지 모두 다 출력해서 보고 싶다면?
	// > 위에서 공부할때 알게 모르게 if문 안에 for문 을 중첩해서 썼었음
	// for문 안에 if문 을 중첩해서 썼었음
	// if문끼리도 중첩해서 쓸 수 있음!!
	// for문끼리도 중첩해서 쓸 수 있다.

	// 중첩 for문의 예시들
	public void method13() {
		// "1 2 3 4 5"
		// "1 2 3 4 5"
		// "1 2 3 4 5"
		// 를 출력하고싶음

		// 방법 1)
		// System.out.println("1 2 3 4 5");
		// System.out.println("1 2 3 4 5");
		// System.out.println("1 2 3 4 5");

		// > 반복문 없이 직접 구문을 작성한 방법
		// (깔끔하게 출력문만 3번 실행되고 끝)

		// 방법2)
		/*
		 * for(int i = 0; i < 3; i++) { System.out.println("1 2 3 4 5"); }
		 */
		// > for문을 한겹만 사용 한방법
		// (반복이 총 3회 진행되고 끝)

		// 방법3)
		for (int i = 0; i < 3; i++) {

			// System.out.println("1 2 3 4 5");
			// 규칙 : 시작수 1, 끝수 5 포함, 1씩 증가
			// 줄바꿈 없이 공백으로 구분해서 출력
			for (int j = 1; j <= 5; j++) {

				System.out.print(j + " ");// "1 2 3 4 5"
			}
			// 다음 증감식으로 넘어가기 전에 개행 넣기
			System.out.println();
		}
		// > for문을 2겹 중첩해서 쓴 방법
		// (반복이 총 n번 실행되고 끝)

		// > 중첩 for문을 쓸 경우
		// 총 반복횟수를 구하고 싶다면
		// 바깥쪽 for문의 반복횟수 * 안쪽 for문의 반복횟수

	} // method13 메소드 영역 끝

	public void method14() {
		
		// ***** 별이 5개
		// ***** 
		// ***** 
		// ***** 
		// ***** 
		
		// 방법1)
		/*
		 * System.out.println("*****"); System.out.println("*****");
		 * System.out.println("*****"); System.out.println("*****");
		 * System.out.println("*****");
		 */
		
		// 방법2)
		/*
		 * for(int i = 0; i < 5; i++) {
		 * 
		 * System.out.println("*****"); }
		 */
		// > 반복이 총 5회 진행됨
		
		
		//방법3)
		
		/*
		 * for(int i = 0; i < 5; i++) { //System.out.println("*****"); for(int j = 0; j
		 * < 5; j++) { System.out.print("*");// "*****" } System.out.println();// 줄바꿈 }
		 */
		// > 반복이 총 25회 진행됨
		
		//방법4)
		// > for문을 단 한겹 쓰되, 반복이 총 25번 진행되게끔 유도
		for(int i = 1; i <=25; i++) {
			//시작수 1, 끝수 25 포함, 1씩 증가(총 25회)
			
			
			System.out.print("*");
			
			// 별이 5개찍힐때마다 줄바꿈을 하고 넘어감
			// ***** i == 5 줄바꿈 추가
			// ***** i == 10 줄바꿈 추가
			// ...
			// > 규칙 : i가 5의 배수일 경우에만 줄바꿈 구문을 추가
			
			if(i % 5 ==0) {
				//i가 5의 배수입니까?
				// > n 의 배수인지 확인하고 싶다면
				//   해당 수를 n 으로 나눈 나머지가 0인지 확인해보자
				System.out.println();
			}
		}
		// > 반복이 동일하게 25번 일어남
		//   중첩 for문 쓰는거랑 하등 다를 바는 없음!!
		
		// * 알고리즘
		// 어떻게 코드를 짜야 컴퓨터가 최대한 일을 적게 하면서
		// 같은 실행결과를 뽑아낼 수 있냐? 에 대해서 고민하는 학문
		// > 프로그램의 성능은 "시간복잡도" 라는 개념과 "공간복잡도"
		// 라는 개념이 결합되서 측정됨
		// - 시간 복잡도 : 컴퓨터가 일하는 횟수
		// - 공간 복잡도 : 메모리 공간이 얼마나 적게쓰이느냐
		
	} // method14 메소드 영역 끝
	
	public void method15() {
		
		// 1*** : 1행 1열 자리에 숫자가 있음
		// *2** : 2행 2열 자리에 숫자가 있음
		// **3* : 3행 3열 자리에 숫자가 있음
		// ***4 : 4행 4열 자리에 숫자가 있음
		
		for(int i = 1; i <= 4; i++) {
			
			System.out.println();
			for(int j = 1; j <=4; j++) {
				
				// 출력을 할 때 고려해야할 점
				// 어느 경우에는 숫자를 출력하고,
				// 어느 경우에는 별을 출력해야 하는가?
				
				//행수 (i) 와 열수 (j) 가 일치할 경우에는 해당 숫자
				// 그게 아닐경우 그냥 *
				if(i == j) {
					System.out.print
					(i);
				}else {
					System.out.print("*");
				}
				
			}
			System.out.println();//개행 넣기
			
		
		}
	
		
	}// method15 메소드 영역 끝
	
	public void method16() {
		// *		* 1개
		// **		* 2개
		// ***		* 3개
		// ****		* 4개
		// *****	* 5개
		
		for(int i = 1; i <= 5; i++) {
			
			// * 을 행수 (i) 만큼 출력하고 넘어가야함
			for(int j = 1; j <= i; j++) {
				System.out.print("*");
			}
			System.out.println();
		}
		
	} // method16 메소드 영역 끝
	public void methdo17() {
		//*****		* 5개
		//****		* 4개
		//***		* 3개
		//**		* 2개
		//*			* 1개
		
		// 총 5행을 출력해야함 : 바깥쪽에서 반복 5회
		for(int i = 5; i >= 1; i--) {
			// 별을 i 만큼만 출력해보기
			for(int j = 0; j<i; j++) {
				System.out.print("*");
			}
			System.out.println();
		}
		
		
	}//method17 메소드 영역 끝
	
	public void method18() {
		//2 ~ 9 단까지 모두 출력
		
		/*
		 * System.out.printf("--- %d단 ---\n", 단수);
		 * 
		 * for(int i = 1; i <= 9; i++){
		 * 		System.out.printf("%d x %d = %d\n", 단수, i, (단수 * i));
		 * 
		 * }
		 * 
		 * > 위의 구문을 단수가 2 에서부터 9 까지 1씩 증가하면서
		 *   매번 반복적으로 실행되야 하는 구조
		 * 
		 */
		
		// 2단 ~ 9단 
		// 규칙 : 시작수 2, 끝수 9 포함, 1씩 증가
		for(int i = 2; i <= 9; i++) {
			System.out.printf("--- %d단 ---\n"
					+ "", i);
			for(int j = 1; j<=9; j++) {
				System.out.printf("%d x %d = %d\n", i, j,i*j);
			}
		}
		
		
	}// method18 메소드 영역 끝
	public void method19() {
		// 사용자로부터 키보드로 영문 문자열을 입력받아
		// 각 인덱스 자리의 글자를 출력
		
		Scanner sc = new Scanner(System.in);
		System.out.print("영문 문자열 입력 : ");
		String en = sc.nextLine();
		// "apple" 을 입력했다면 반복 5회
		// "hi" 를 입력했다면 반복 2회
		// > 결국 글자수만큼 반복이 일어남
		
		System.out.println("---------------");
		for(int i = 0; i < en.length(); i++) {
			
			System.out.printf("%d번째 글자 : %c",i,en.charAt(i));
			System.out.println();
			}
		
		

		/*
		 * 실행예시)
		 * 영문 문자열 입력 : apple
		 * ----------------------
		 * 0번째 글자 : a
		 * 1번째 글자 : p
		 * 2번째 글자 : p
		 * 3번째 글자 : l
		 * 4번째 글자 : e
		 * 
		 * 
		 * 힌트)
		 * 결국 반복횟수가 글자수 만큼 돌아갸아함!!
		 * 글자수 == 문자열의 길이
		 * 사용자가 몇글자 짜리 문자열을 입력할지 아무도 모름
		 * > 문자열의 길이를 알아내는 방법
		 *  [ 표현법 ]
		 * 	문자열.length();  
		 * 	
		 * 
		 */
	}//method19 메소드 영역 끝
	public void method20() {
		// 1 ~ 45 까지의 랜덤한 정수값을
		// 총 6개 뽑아서 출력
		// "4 1 25 3 4 38"
		// "7 11 2 30 21 45"
		// 예) 1 ~ 45 사이의 랜덤한 정수를 얻어내고 싶다 (int)(Math.random() * 45 + 1)
		
		// i = 0 1 2 3 4 5 (반복이 돔) / 6 (빠져나감)
		System.out.println();
		for(int i = 0; i < 6; i++ ) {
			int random = (int)(Math.random() * 45 + 1);
			System.out.print(" " + random);
		}
		
	}

}
